#+title: Supply Chain Shipment Pricing Prediction

* Introduction


** Theoretical Background

In this study, Gradient Boosted Tree, MLR, and supervised learning algorithms DNN, XGBoost regression, and LightGBM regression were used. The definition and characteristics of each algorithm are shown in [[Table 1]].


#+NAME: Table 1
| Algorithm                                | Definition                                                                                                       | Characteristic                                                                                    |
|------------------------------------------+------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------|
| Gradient boosted trees model (GBT Model) | Each tree is trained to predict and then "correct" for the errors of the previously trained trees                | A set of shallow decision trees trained sequentially.                                             |
| Multiple linear regression (MLR)         | A statistical technique for estimating a predictive target utilizing a linear relationship between two or more predictive factors for one predictive target. | Predicts a dependent variable using multiple independent variables.                               |
| Deep neural network (DNN)                | An artificial neural network consisting of many hidden layers between an input and output layer.                 | This algorithm can model complex nonlinear relationships, and it contains multiple hidden layers. |
| XGBoost regression                       | Extreme gradient boosting acting as an improved algorithm based on the gradient boosting algorithm.              | Excellent efficiency, flexibility, and portability, and it can prevent overfitting.               |
| LightGBM regression                      | Gradient boost-based algorithm that includes two techniques. (1) Gradient based on one-side sampling and (2) exclusive feature bundling. | An ensemble technique that utilizes a leaf-wise tree partitioning method.                         |

** Import Packages

#+begin_src jupyter-python :export code
import tensorflow_decision_forests as tfdf

import os
import numpy as np
import pandas as pd
import tensorflow as tf
import math
import tabulate
#+end_src

#+RESULTS:

#+begin_src jupyter-python :exports both
print("Found TensorFlow Decision Forests v" + tfdf.__version__)
#+end_src

#+RESULTS:
: Found TensorFlow Decision Forests v1.3.0

* Data Collection and Preprocessing

** Data Collection

This data set provides supply chain health commodity shipment and pricing data. Specifically, the data set identifies Antiretroviral (ARV) and HIV lab shipments to supported countries. In addition, the data set provides the commodity pricing and associated supply chain expenses necessary to move the commodities to countries for use. The dataset has similar fields to the Global Fund's Price, Quality and Reporting (PQR) data. PEPFAR and the Global Fund represent the two largest procurers of HIV health commodities. This dataset, when analyzed in conjunction with the PQR data, provides a more complete picture of global spending on specific health commodities. The data are particularly valuable for understanding ranges and trends in pricing as well as volumes delivered by country. The US Government believes this data will help stakeholders make better, data-driven decisions. Care should be taken to consider contextual factors when using the database. Conclusions related to costs associated with moving specific line items or products to specific countries and lead times by product/country will not be accurate.

#+begin_src jupyter-python :exports both :results table
# Load the dataset into Pandas DataFrame
dataset_df = pd.read_csv("Supply_Chain_Shipment_Pricing_Data.csv")

dataset_df.tail()
#+end_src

#+RESULTS:
#+begin_example
          id project code       pq # po / so # asn/dn #        country
10319  86818   103-ZW-T30  FPQ-15197  SO-50020  DN-4307       Zimbabwe  \
10320  86819   104-CI-T30  FPQ-15259  SO-50102  DN-4313  CÃ´te d'Ivoire
10321  86821   110-ZM-T30  FPQ-14784  SO-49600  DN-4316         Zambia
10322  86822   200-ZW-T30  FPQ-16523  SO-51680  DN-4334       Zimbabwe
10323  86823   103-ZW-T30  FPQ-15197  SO-50022  DN-4336       Zimbabwe

      managed by fulfill via vendor inco term shipment mode  ...
10319   PMO - US    From RDC   N/A - From RDC         Truck  ...  \
10320   PMO - US    From RDC   N/A - From RDC         Truck  ...
10321   PMO - US    From RDC   N/A - From RDC         Truck  ...
10322   PMO - US    From RDC   N/A - From RDC         Truck  ...
10323   PMO - US    From RDC   N/A - From RDC         Truck  ...

      unit of measure (per pack) line item quantity line item value
10319                         60             166571       599655.60  \
10320                         60              21072       137389.44
10321                         30             514526      5140114.74
10322                         60              17465       113871.80
10323                         60              36639        72911.61

      pack price unit price              manufacturing site
10319       3.60       0.06      Mylan,  H-12 & H-13, India  \
10320       6.52       0.11    Hetero Unit III Hyderabad IN
10321       9.99       0.33   Cipla Ltd A-42 MIDC Mahar. IN
10322       6.52       0.11  Mylan (formerly Matrix) Nashik
10323       1.99       0.03               Cipla, Goa, India

      first line designation          weight (kilograms)
10319                  False     See DN-4307 (ID#:83920)  \
10320                  False     See DN-4313 (ID#:83921)
10321                  False  Weight Captured Separately
10322                   True                        1392
10323                  False  Weight Captured Separately

                       freight cost (usd) line item insurance (usd)
10319             See DN-4307 (ID#:83920)                    705.79
10320             See DN-4313 (ID#:83921)                    161.71
10321  Freight Included in Commodity Cost                   5284.04
10322  Freight Included in Commodity Cost                    134.03
10323  Freight Included in Commodity Cost                     85.82

[5 rows x 33 columns]
#+end_example

** Data Preprocessing

*** Creating and Removing Variables

Removing weight values which are not directly referenced within the dataset.

#+begin_src jupyter-python
dataset_df['weight (kilograms)'] = pd.to_numeric(dataset_df['weight (kilograms)'], errors = 'coerce')
dataset_df.dropna(inplace = True)
#+end_src

#+RESULTS:

Removing Freight Cost values that are not referenced within the dataset.

#+begin_src jupyter-python
dataset_df['freight cost (usd)'] = pd.to_numeric(dataset_df['freight cost (usd)'], errors = 'coerce')
dataset_df.dropna(inplace = True)
#+end_src

#+RESULTS:

Now let's see if the remaining dataset is prepared for further processing.

#+begin_src jupyter-python :exports both
dim = dataset_df.shape

print(f"Shape of Shipment Pricing dataset after weight and cost reference removal: {dim}")

dataset_df.info()
#+end_src

#+RESULTS:
#+begin_example
Shape of Shipment Pricing dataset after weight and cost reference removal: (4571, 33)
<class 'pandas.core.frame.DataFrame'>
Index: 4571 entries, 18 to 10316
Data columns (total 33 columns):
 #   Column                        Non-Null Count  Dtype
---  ------                        --------------  -----
 0   id                            4571 non-null   int64
 1   project code                  4571 non-null   object
 2   pq #                          4571 non-null   object
 3   po / so #                     4571 non-null   object
 4   asn/dn #                      4571 non-null   object
 5   country                       4571 non-null   object
 6   managed by                    4571 non-null   object
 7   fulfill via                   4571 non-null   object
 8   vendor inco term              4571 non-null   object
 9   shipment mode                 4571 non-null   object
 10  pq first sent to client date  4571 non-null   object
 11  po sent to vendor date        4571 non-null   object
 12  scheduled delivery date       4571 non-null   object
 13  delivered to client date      4571 non-null   object
 14  delivery recorded date        4571 non-null   object
 15  product group                 4571 non-null   object
 16  sub classification            4571 non-null   object
 17  vendor                        4571 non-null   object
 18  item description              4571 non-null   object
 19  molecule/test type            4571 non-null   object
 20  brand                         4571 non-null   object
 21  dosage                        4571 non-null   object
 22  dosage form                   4571 non-null   object
 23  unit of measure (per pack)    4571 non-null   int64
 24  line item quantity            4571 non-null   int64
 25  line item value               4571 non-null   float64
 26  pack price                    4571 non-null   float64
 27  unit price                    4571 non-null   float64
 28  manufacturing site            4571 non-null   object
 29  first line designation        4571 non-null   bool
 30  weight (kilograms)            4571 non-null   float64
 31  freight cost (usd)            4571 non-null   float64
 32  line item insurance (usd)     4571 non-null   float64
dtypes: bool(1), float64(6), int64(3), object(23)
memory usage: 1.2+ MB
#+end_example

We can focus on the statistics regarding the numerical columns of the dataset.

#+begin_src jupyter-python :exports both
dataset_df.describe()
#+end_src

#+RESULTS:
#+begin_example
                 id  unit of measure (per pack)  line item quantity
count   4571.000000                 4571.000000         4571.000000  \
mean   56957.054255                   79.959090        27470.185955
std    30959.704494                   86.895991        48231.724706
min      115.000000                    5.000000            1.000000
25%    22402.000000                   30.000000         1591.000000
50%    75733.000000                   60.000000         8676.000000
75%    83868.500000                   60.000000        33422.000000
max    86815.000000                 1000.000000       619999.000000

       line item value   pack price   unit price  weight (kilograms)
count     4.571000e+03  4571.000000  4571.000000         4571.000000  \
mean      2.091655e+05    12.019807     0.198324         3908.025159
std       4.169485e+05    18.385518     0.290996         7876.806664
min       0.000000e+00     0.000000     0.000000            1.000000
25%       1.043055e+04     3.400000     0.060000          268.000000
50%       5.778000e+04     7.300000     0.140000         1347.000000
75%       2.247840e+05    11.750000     0.230000         4287.000000
max       5.951990e+06   306.880000    14.040000       154780.000000

       freight cost (usd)  line item insurance (usd)
count         4571.000000                4571.000000
mean         10761.065629                 318.840171
std          15193.737445                 609.247953
min             14.360000                   0.000000
25%           2336.265000                  16.075000
50%           5900.000000                  86.360000
75%          13322.900000                 343.335000
max         194623.440000                7708.440000
#+end_example


*** Removing Data Outliers

Removing outliers will be done by utilizing the interquartile range (IQR). Additionally this is only applied to continuous variables. These include the variables with data type ~float64~.

#+NAME: Table 2
| Continuous Variable       | Description                                                                                |
|---------------------------+--------------------------------------------------------------------------------------------|
| Line item value           | Total value of commodity per line item                                                     |
| Pack price                | Cost per pack (i.e. month s supply of ARVs, pack of 60 test kits)                          |
| Unit price                | Cost per pill (for drugs) or per test (for test kits)                                      |
| Weight (kilograms)        | Weight for all lines on an ASN DN                                                          |
| Freight cost (USD)        | Freight charges associated with all lines on the respective ASN DN                         |
| Line item insurance (USD) | Line item cost of insurance, created by applying an annual flat rate to commodity cost     |

*** Handling Missing Data

By removing all non-numerical data in the weight and freight cost variables, the missing values were handled successfully.

* Derivation of Key Factors

** Correlational Analysis

** Stepwise Method

* Model Construction and Analysis Results

** Data Preperation

** Gradient Boosted Trees Model (GBT Model)

** MLR

** DNN

** XGBoost Regression

** LightGBM

** Model Comparison

** Variable Importance

* Conclusions
