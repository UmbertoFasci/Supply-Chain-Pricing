#+title: Supply Chain Shipment Pricing Prediction

* Introduction


** Theoretical Background

In this study, Gradient Boosted Tree, MLR, and supervised learning algorithms DNN, XGBoost regression, and LightGBM regression were used. The definition and characteristics of each algorithm are shown in [[Table 1]].


#+NAME: Table 1
| Algorithm                                | Definition                                                                                                       | Characteristic                                                                                    |
|------------------------------------------+------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------|
| Gradient boosted trees model (GBT Model) | Each tree is trained to predict and then "correct" for the errors of the previously trained trees                | A set of shallow decision trees trained sequentially.                                             |
| Multiple linear regression (MLR)         | A statistical technique for estimating a predictive target utilizing a linear relationship between two or more predictive factors for one predictive target. | Predicts a dependent variable using multiple independent variables.                               |
| Deep neural network (DNN)                | An artificial neural network consisting of many hidden layers between an input and output layer.                 | This algorithm can model complex nonlinear relationships, and it contains multiple hidden layers. |
| XGBoost regression                       | Extreme gradient boosting acting as an improved algorithm based on the gradient boosting algorithm.              | Excellent efficiency, flexibility, and portability, and it can prevent overfitting.               |
| LightGBM regression                      | Gradient boost-based algorithm that includes two techniques. (1) Gradient based on one-side sampling and (2) exclusive feature bundling. | An ensemble technique that utilizes a leaf-wise tree partitioning method.                         |

** Import Packages

#+begin_src jupyter-python :export code
import tensorflow_decision_forests as tfdf

import os
import numpy as np
import pandas as pd
import tensorflow as tf
import math
#+end_src

#+RESULTS:

#+begin_src jupyter-python :exports both
print("Found TensorFlow Decision Forests v" + tfdf.__version__)
#+end_src

#+RESULTS:
: Found TensorFlow Decision Forests v1.3.0

* Data Collection and Preprocessing

** Data Collection

This data set provides supply chain health commodity shipment and pricing data. Specifically, the data set identifies Antiretroviral (ARV) and HIV lab shipments to supported countries. In addition, the data set provides the commodity pricing and associated supply chain expenses necessary to move the commodities to countries for use. The dataset has similar fields to the Global Fund's Price, Quality and Reporting (PQR) data. PEPFAR and the Global Fund represent the two largest procurers of HIV health commodities. This dataset, when analyzed in conjunction with the PQR data, provides a more complete picture of global spending on specific health commodities. The data are particularly valuable for understanding ranges and trends in pricing as well as volumes delivered by country. The US Government believes this data will help stakeholders make better, data-driven decisions. Care should be taken to consider contextual factors when using the database. Conclusions related to costs associated with moving specific line items or products to specific countries and lead times by product/country will not be accurate.

#+begin_src jupyter-python :exports both :results table
# Load the dataset into Pandas DataFrame
dataset_df = pd.read_csv("Supply_Chain_Shipment_Pricing_Data.csv")

dataset_df.tail()
#+end_src

#+RESULTS:
#+begin_example
          id project code       pq # po / so # asn/dn #        country
10319  86818   103-ZW-T30  FPQ-15197  SO-50020  DN-4307       Zimbabwe  \
10320  86819   104-CI-T30  FPQ-15259  SO-50102  DN-4313  CÃ´te d'Ivoire
10321  86821   110-ZM-T30  FPQ-14784  SO-49600  DN-4316         Zambia
10322  86822   200-ZW-T30  FPQ-16523  SO-51680  DN-4334       Zimbabwe
10323  86823   103-ZW-T30  FPQ-15197  SO-50022  DN-4336       Zimbabwe

      managed by fulfill via vendor inco term shipment mode  ...
10319   PMO - US    From RDC   N/A - From RDC         Truck  ...  \
10320   PMO - US    From RDC   N/A - From RDC         Truck  ...
10321   PMO - US    From RDC   N/A - From RDC         Truck  ...
10322   PMO - US    From RDC   N/A - From RDC         Truck  ...
10323   PMO - US    From RDC   N/A - From RDC         Truck  ...

      unit of measure (per pack) line item quantity line item value
10319                         60             166571       599655.60  \
10320                         60              21072       137389.44
10321                         30             514526      5140114.74
10322                         60              17465       113871.80
10323                         60              36639        72911.61

      pack price unit price              manufacturing site
10319       3.60       0.06      Mylan,  H-12 & H-13, India  \
10320       6.52       0.11    Hetero Unit III Hyderabad IN
10321       9.99       0.33   Cipla Ltd A-42 MIDC Mahar. IN
10322       6.52       0.11  Mylan (formerly Matrix) Nashik
10323       1.99       0.03               Cipla, Goa, India

      first line designation          weight (kilograms)
10319                  False     See DN-4307 (ID#:83920)  \
10320                  False     See DN-4313 (ID#:83921)
10321                  False  Weight Captured Separately
10322                   True                        1392
10323                  False  Weight Captured Separately

                       freight cost (usd) line item insurance (usd)
10319             See DN-4307 (ID#:83920)                    705.79
10320             See DN-4313 (ID#:83921)                    161.71
10321  Freight Included in Commodity Cost                   5284.04
10322  Freight Included in Commodity Cost                    134.03
10323  Freight Included in Commodity Cost                     85.82

[5 rows x 33 columns]
#+end_example


** Data Preprocessing

*** Creating and Removing Variables

Removing weight values which are not directly referenced within the dataset.

#+begin_src jupyter-python
dataset_df['weight (kilograms)'] = pd.to_numeric(dataset_df['weight (kilograms)'], errors = 'coerce')
dataset_df.dropna(inplace = True)
#+end_src

#+RESULTS:

Removing Freight Cost values that are not referenced within the dataset.

#+begin_src jupyter-python
dataset_df['freight cost (usd)'] = pd.to_numeric(dataset_df['freight cost (usd)'], errors = 'coerce')
dataset_df.dropna(inplace = True)
#+end_src

#+RESULTS:

Now let's see if the remaining dataset is prepared for further processing.

#+begin_src jupyter-python :exports both
dim = dataset_df.shape

print(f"Shape of Shipment Pricing dataset after weight and cost reference removal: {dim}")

dataset_df.info()
#+end_src

#+RESULTS:
#+begin_example
Shape of Shipment Pricing dataset after weight and cost reference removal: (4571, 33)
<class 'pandas.core.frame.DataFrame'>
Index: 4571 entries, 18 to 10316
Data columns (total 33 columns):
 #   Column                        Non-Null Count  Dtype
---  ------                        --------------  -----
 0   id                            4571 non-null   int64
 1   project code                  4571 non-null   object
 2   pq #                          4571 non-null   object
 3   po / so #                     4571 non-null   object
 4   asn/dn #                      4571 non-null   object
 5   country                       4571 non-null   object
 6   managed by                    4571 non-null   object
 7   fulfill via                   4571 non-null   object
 8   vendor inco term              4571 non-null   object
 9   shipment mode                 4571 non-null   object
 10  pq first sent to client date  4571 non-null   object
 11  po sent to vendor date        4571 non-null   object
 12  scheduled delivery date       4571 non-null   object
 13  delivered to client date      4571 non-null   object
 14  delivery recorded date        4571 non-null   object
 15  product group                 4571 non-null   object
 16  sub classification            4571 non-null   object
 17  vendor                        4571 non-null   object
 18  item description              4571 non-null   object
 19  molecule/test type            4571 non-null   object
 20  brand                         4571 non-null   object
 21  dosage                        4571 non-null   object
 22  dosage form                   4571 non-null   object
 23  unit of measure (per pack)    4571 non-null   int64
 24  line item quantity            4571 non-null   int64
 25  line item value               4571 non-null   float64
 26  pack price                    4571 non-null   float64
 27  unit price                    4571 non-null   float64
 28  manufacturing site            4571 non-null   object
 29  first line designation        4571 non-null   bool
 30  weight (kilograms)            4571 non-null   float64
 31  freight cost (usd)            4571 non-null   float64
 32  line item insurance (usd)     4571 non-null   float64
dtypes: bool(1), float64(6), int64(3), object(23)
memory usage: 1.2+ MB
#+end_example

We can focus on the statistics regarding the numerical columns of the dataset.

#+begin_src jupyter-python :exports both
dataset_df.describe()
#+end_src

#+RESULTS:
#+begin_example
                 id  unit of measure (per pack)  line item quantity
count   4571.000000                 4571.000000         4571.000000  \
mean   56957.054255                   79.959090        27470.185955
std    30959.704494                   86.895991        48231.724706
min      115.000000                    5.000000            1.000000
25%    22402.000000                   30.000000         1591.000000
50%    75733.000000                   60.000000         8676.000000
75%    83868.500000                   60.000000        33422.000000
max    86815.000000                 1000.000000       619999.000000

       line item value   pack price   unit price  weight (kilograms)
count     4.571000e+03  4571.000000  4571.000000         4571.000000  \
mean      2.091655e+05    12.019807     0.198324         3908.025159
std       4.169485e+05    18.385518     0.290996         7876.806664
min       0.000000e+00     0.000000     0.000000            1.000000
25%       1.043055e+04     3.400000     0.060000          268.000000
50%       5.778000e+04     7.300000     0.140000         1347.000000
75%       2.247840e+05    11.750000     0.230000         4287.000000
max       5.951990e+06   306.880000    14.040000       154780.000000

       freight cost (usd)  line item insurance (usd)
count         4571.000000                4571.000000
mean         10761.065629                 318.840171
std          15193.737445                 609.247953
min             14.360000                   0.000000
25%           2336.265000                  16.075000
50%           5900.000000                  86.360000
75%          13322.900000                 343.335000
max         194623.440000                7708.440000
#+end_example

#+begin_src jupyter-python :exports both
date_list=['scheduled delivery date', 'delivered to client date', 'delivery recorded date']
same_date=[]

for i in range(len(date_list)-1):
    for j in dataset_df.index:
        if dataset_df[date_list[i]][j]!=dataset_df[date_list[i+1]][j]:
            same_date.append(j)
#+end_src

#+RESULTS:
#+begin_src jupyter-python :exports both
len(same_date)
#+end_src

#+RESULTS:
: 5911


#+begin_src jupyter-python :results output file :file coor1.png :output-dir images/
import sys
import matplotlib as plt
import seaborn as sns

coor1 = sns.scatterplot(x='line item insurance (usd)', y='line item value', hue="country", data=dataset_df)

sns.move_legend(coor1, "lower center", bbox_to_anchor=(.5, 1), ncol=6, title=None, frameon=False)
#+end_src

#+RESULTS:
[[file:images/coor1.png]]

*** Removing Data Outliers

Removing outliers will be done by utilizing the interquartile range (IQR). Additionally this is only applied to continuous variables. These include the variables with data type ~float64~.

#+NAME: Table 2
| Continuous Variable       | Description                                                                                |
|---------------------------+--------------------------------------------------------------------------------------------|
| Line item value           | Total value of commodity per line item                                                     |
| Pack price                | Cost per pack (i.e. month s supply of ARVs, pack of 60 test kits)                          |
| Unit price                | Cost per pill (for drugs) or per test (for test kits)                                      |
| Weight (kilograms)        | Weight for all lines on an ASN DN                                                          |
| Freight cost (USD)        | Freight charges associated with all lines on the respective ASN DN                         |
| Line item insurance (USD) | Line item cost of insurance, created by applying an annual flat rate to commodity cost     |

Outlier detection function:
#+begin_src jupyter-python :exports both
def outlier_treatment(datacolumn):
    sorted(datacolumn) # arrange data in ascending order
    Q1,Q3 = np.percentile(datacolumn, [25, 75])
    IQR = Q3 - Q1
    lower_range = Q1 - (1.5 * IQR)
    upper_range = Q3 + (1.5 * IQR)
    return lower_range,upper_range
#+end_src

#+RESULTS:

Obtain lower and upper bound values found in the ~line item value~ variable.
#+begin_src jupyter-python :exports code
lowerbound_LIV,upperbound_LIV = outlier_treatment(dataset_df['line item value'])

dataset_df[(dataset_df['line item value'] < lowerbound_LIV) | (dataset_df['line item value'] > upperbound_LIV)]
#+end_src

#+RESULTS:
#+begin_example
          id project code            pq #   po / so #  asn/dn #     country
84       858   109-TZ-T01  Pre-PQ Process  SCMS-34680  ASN-3332    Tanzania  \
200     1888   107-RW-T01  Pre-PQ Process  SCMS-25520  ASN-2079      Rwanda
201     1889   107-RW-T01  Pre-PQ Process  SCMS-25520  ASN-2080      Rwanda
236     2305   131-NG-T01  Pre-PQ Process  SCMS-37370  ASN-3497     Nigeria
399     3828   107-RW-T01  Pre-PQ Process  SCMS-43870  ASN-4687      Rwanda
...      ...          ...             ...         ...       ...         ...
10222  86653   151-NG-T30       FPQ-12248    SO-45670   DN-3539     Nigeria
10258  86703   107-RW-T30       FPQ-14111    SO-48800   DN-3788      Rwanda
10303  86800   111-MZ-T30       FPQ-15195    SO-50141   DN-4231  Mozambique
10305  86802   111-MZ-T30       FPQ-15195    SO-50130   DN-4235  Mozambique
10315  86814   151-NG-T30       FPQ-14989    SO-51424   DN-4276     Nigeria

      managed by  fulfill via vendor inco term shipment mode  ...
84      PMO - US  Direct Drop              CIP           Air  ...  \
200     PMO - US  Direct Drop              CIP           Air  ...
201     PMO - US  Direct Drop              CIP           Air  ...
236     PMO - US  Direct Drop              CIP           Air  ...
399     PMO - US  Direct Drop              CIP           Air  ...
...          ...          ...              ...           ...  ...
10222   PMO - US     From RDC   N/A - From RDC   Air Charter  ...
10258   PMO - US     From RDC   N/A - From RDC         Truck  ...
10303   PMO - US     From RDC   N/A - From RDC         Truck  ...
10305   PMO - US     From RDC   N/A - From RDC         Truck  ...
10315   PMO - US     From RDC   N/A - From RDC   Air Charter  ...

      unit of measure (per pack) line item quantity line item value
84                            30              50000      2520000.00  \
200                           60              47879       569281.31
201                           60              61021       725539.69
236                           30              25000      1260000.00
399                           60              54432       641753.28
...                          ...                ...             ...
10222                         60             169447       635426.25
10258                         60              86008       697524.88
10303                         30             200000      1920000.00
10305                         60             300000      2316000.00
10315                        120              70000      1304800.00

      pack price unit price              manufacturing site
84         50.40       1.68                MSD, Haarlem, NL  \
200        11.89       0.20       Aurobindo Unit III, India
201        11.89       0.20       Aurobindo Unit III, India
236        50.40       1.68                MSD, Haarlem, NL
399        11.79       0.20  Mylan (formerly Matrix) Nashik
...          ...        ...                             ...
10222       3.75       0.06      Strides, Bangalore, India.
10258       8.11       0.14    Hetero Unit III Hyderabad IN
10303       9.60       0.32    Hetero Unit III Hyderabad IN
10305       7.72       0.13    Hetero Unit III Hyderabad IN
10315      18.64       0.16     ABBVIE Ludwigshafen Germany

      first line designation weight (kilograms) freight cost (usd)
84                      True             4093.0            9339.00  \
200                     True             5311.0           30408.04
201                     True             6768.0           38120.96
236                     True             2067.0            7933.38
399                     True             7278.0           61925.70
...                      ...                ...                ...
10222                   True             8039.0           30936.10
10258                   True            11117.0           15617.93
10303                   True            26603.0           19194.37
10305                   True            39688.0           28277.42
10315                   True            15198.0           26180.00

      line item insurance (usd)
84                      4939.20
200                      910.85
201                     1160.86
236                     2469.60
399                     1257.84
...                         ...
10222                    786.02
10258                    717.06
10303                   2259.84
10305                   2725.93
10315                   1341.33

[473 rows x 33 columns]
#+end_example

473 rows of data within the ~line item value~ variable are described as being outside 25, and 75 percentile. This is many values and perhaps a more restrictive percentile range should be considered such as (5, 95).

Detecting outliers in ~pack price~ variable.
#+begin_src jupyter-python :exports code
lowerbound_PP,upperbound_PP = outlier_treatment(dataset_df['pack price'])

dataset_df[(dataset_df['pack price'] < lowerbound_PP) | (dataset_df['pack price'] > upperbound_PP)]
#+end_src

#+RESULTS:
#+begin_example
          id project code            pq #   po / so #  asn/dn #
24       116   108-VN-T01  Pre-PQ Process    SCMS-759   ASN-632  \
64       630   112-NG-T01  Pre-PQ Process  SCMS-26560  ASN-2366
84       858   109-TZ-T01  Pre-PQ Process  SCMS-34680  ASN-3332
91       985   109-TZ-T01  Pre-PQ Process  SCMS-38370  ASN-3751
112     1109   104-CI-T01  Pre-PQ Process  SCMS-42210  ASN-4086
...      ...          ...             ...         ...       ...
9637   85936   114-UG-T30       FPQ-10786    SO-43520   DN-3011
10077  86480   151-NG-T30        FPQ-9432    SO-42333   DN-2688
10097  86501   114-UG-T30        FPQ-9876    SO-42311   DN-2780
10109  86513   109-TZ-T30        FPQ-9271    SO-41582   DN-2844
10126  86530   114-UG-T30       FPQ-10786    SO-43530   DN-2925

             country managed by  fulfill via vendor inco term shipment mode
24           Vietnam   PMO - US  Direct Drop              FCA           Air  \
64           Nigeria   PMO - US  Direct Drop              EXW           Air
84          Tanzania   PMO - US  Direct Drop              CIP           Air
91          Tanzania   PMO - US  Direct Drop              FCA           Air
112    CÃ´te d'Ivoire   PMO - US  Direct Drop              FCA           Air
...              ...        ...          ...              ...           ...
9637          Uganda   PMO - US     From RDC   N/A - From RDC           Air
10077        Nigeria   PMO - US     From RDC   N/A - From RDC   Air Charter
10097         Uganda   PMO - US     From RDC   N/A - From RDC           Air
10109       Tanzania   PMO - US     From RDC   N/A - From RDC         Truck
10126         Uganda   PMO - US     From RDC   N/A - From RDC           Air

       ... unit of measure (per pack) line item quantity line item value
24     ...                        120                500        41095.00  \
64     ...                        540                 34         1547.68
84     ...                         30              50000      2520000.00
91     ...                        300                524        21536.40
112    ...                        120              10240       420864.00
...    ...                        ...                ...             ...
9637   ...                        120               8494       210311.44
10077  ...                        120              24470       726269.60
10097  ...                        120               2427        72033.36
10109  ...                        120              16114       472301.34
10126  ...                        120               8335       222544.50

      pack price unit price               manufacturing site
24         82.19       0.68      ABBVIE Ludwigshafen Germany  \
64         45.52       0.08  Novartis Pharma AG, Switzerland
84         50.40       1.68                 MSD, Haarlem, NL
91         41.10       0.14        ABBVIE (Abbott) Logis. UK
112        41.10       0.34      ABBVIE Ludwigshafen Germany
...          ...        ...                              ...
9637       24.76       0.21        Aurobindo Unit III, India
10077      29.68       0.25        Aurobindo Unit III, India
10097      29.68       0.25   Mylan (formerly Matrix) Nashik
10109      29.31       0.24   Mylan (formerly Matrix) Nashik
10126      26.70       0.22        Aurobindo Unit III, India

      first line designation weight (kilograms) freight cost (usd)
24                      True              117.0            1767.38  \
64                      True              115.0            1755.87
84                      True             4093.0            9339.00
91                      True              644.0            6668.61
112                     True             2523.0           14806.48
...                      ...                ...                ...
9637                    True             2089.0           17032.59
10077                   True             6808.0           21347.12
10097                   True              647.0            7263.17
10109                   True             4256.0            6052.10
10126                   True             2034.0           10977.65

      line item insurance (usd)
24                        65.75
64                         2.48
84                      4939.20
91                        42.21
112                      824.89
...                         ...
9637                     260.16
10077                   1018.23
10097                    100.99
10109                    662.17
10126                    275.29

[507 rows x 33 columns]
#+end_example

507 rows of data within the ~pack price~ variable are described as being outside the 25 and 75 percentile. Again, this is so much data and a more restrective percentile range should be considered.

*Further handling of outlier values will have to be done through a multivariate process.*

*** Handling Missing Data

By removing all non-numerical data in the weight and freight cost variables, the missing values were handled successfully.

* Derivation of Key Factors

** Correlational Analysis

** Stepwise Method

* Model Construction and Analysis Results

** Data Preperation

** Gradient Boosted Trees Model (GBT Model)

** MLR

** DNN

** XGBoost Regression

** LightGBM

** Model Comparison

** Variable Importance

* Conclusions
